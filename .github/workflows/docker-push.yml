name: Build and Deploy to ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 928352609536.dkr.ecr.us-east-1.amazonaws.com
  CLUSTER_NAME: obligatorio-sparis-dev-cluster
  SERVICE_NAME: obligatorio-sparis-dev-service
  TASK_FAMILY: obligatorio-sparis-dev-td

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

    - name: Build and push vote image
      run: |
        docker build -t $ECR_REGISTRY/obligatorio-sparis-vote ./vote
        docker push $ECR_REGISTRY/obligatorio-sparis-vote

    - name: Build and push result image
      run: |
        docker build -t $ECR_REGISTRY/obligatorio-sparis-result ./result
        docker push $ECR_REGISTRY/obligatorio-sparis-result

    - name: Build and push worker image
      run: |
        docker build -t $ECR_REGISTRY/obligatorio-sparis-worker ./worker
        docker push $ECR_REGISTRY/obligatorio-sparis-worker

    - name: Register new ECS Task Definition
      id: register-task
      run: |
        TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)
        NEW_DEF=$(echo $TASK_DEF | jq \
          --arg VOTE_IMAGE "$ECR_REGISTRY/obligatorio-sparis-vote:latest" \
          --arg RESULT_IMAGE "$ECR_REGISTRY/obligatorio-sparis-result:latest" \
          --arg WORKER_IMAGE "$ECR_REGISTRY/obligatorio-sparis-worker:latest" \
          '.taskDefinition |
          .containerDefinitions |= map(
            if .name == "obligatorio-sparis-dev-vote" then .image = $VOTE_IMAGE
            elif .name == "obligatorio-sparis-dev-result" then .image = $RESULT_IMAGE
            elif .name == "obligatorio-sparis-dev-worker" then .image = $WORKER_IMAGE
            else .
            end
          ) |
          {
            family,
            networkMode,
            containerDefinitions,
            requiresCompatibilities,
            cpu,
            memory,
            executionRoleArn,
            taskRoleArn
          }')
        echo "$NEW_DEF" > new-task-def.json
        REVISION=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.revision' --output text)
        echo "revision=$REVISION" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --task-definition $TASK_FAMILY:${{ steps.register-task.outputs.revision }} \
          --force-new-deployment
